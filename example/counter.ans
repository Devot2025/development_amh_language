#class
@! This method currently has a bug. (kept as a note)

@ Public area
pbl{
    obj count;

    obj init(){
        count = 0;
        @ low-level output only (no print)
        ____virtual__write(stdout, "init done" + "\n");
    }

    obj add(){
        count = count + 1;
        @ low-level output only (no print)
        ____virtual__write(stdout, "add: count = " + count + "\n");
    }

    obj reset(){
        count = 0;
        @ low-level output only (no print)
        ____virtual__write(stdout, "reset: count = 0" + "\n");
    }

    obj show_status(){
        @ parsed former 'print("Count: " + count)' into direct virtual I/O
        ____virtual__write(stdout, "count: " + count + "\n");
    }
}

@ +{} is the short form of public area
+{
    obj quick_add(){
        count = count + 10;
        ____virtual__write(stdout, "quick_add: count = " + count + "\n");
    }
}

@ Private area
prv{
    obj secret;

    obj hide_value(obj v){
        secret = v;
        @ no output here (private)
    }
}

@ -{} is the short form of private area
-{
    obj get_hidden(){
        return secret;
    }
}

@ Protected area
prt{
    obj backup;

    obj save(){
        backup = count;
        ____virtual__write(stdout, "save: backup = " + backup + "\n");
    }

    obj restore(){
        count = backup;
        ____virtual__write(stdout, "restore: count = " + count + "\n");
    }
}

@ %{} is the short form of protected area
%{
    obj protect_test(){
        ____virtual__write(stdout, "protected function works." + "\n");
    }
}
stdout = 1;
return 0;
